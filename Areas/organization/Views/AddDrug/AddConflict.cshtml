@model IEnumerable<WebApplication8.Models.Risk_con>

@{
    Layout = null;
    ViewBag.Title = "AddConflict";
}


<style>
    * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }


    ::-webkit-scrollbar {
        width: 15px;
    }

    ::-webkit-scrollbar-track {
        background-color: white;
    }

    ::-webkit-scrollbar-thumb {
        background-color: #0075ff;
    }

        ::-webkit-scrollbar-thumb:hover {
            background-color: #0075ff;
        }

    html {
        scroll-behavior: smooth;
    }

    body {
        margin: 0;
        padding: 0;
        background-color: #F5F5F5;
        background-repeat: no-repeat;
        background-size: 100%;
    }

    a {
        text-decoration: none;
    }

    ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .form-horizontal {
        overflow: auto;
        min-width: 500px;
        height: 80%;
        background-color: rgba(0,0,0,0.7);
        color: #fff;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        box-sizing: border-box;
        padding: 70px 30px;
        box-shadow: 0px 0px 3px black;
        border-radius: 30px;
    }

        .form-horizontal::-webkit-scrollbar {
            display: none;
        }

        .form-horizontal h4 {
            text-align: center;
            margin: 0 auto;
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 1rem;
            margin-bottom: 1rem;
            color: #fff;
        }

        .form-horizontal h3 {
            font-size: 1rem;
            font-weight: bold;
            margin-top: 5px;
            margin-bottom: 10px;
            color: orangered;
        }

        .form-horizontal span {
            font-weight: bold;
            color: white;
        }

    .form-group {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    label {
        margin-right: 20px;
        color: gainsboro;
        font-weight: bold;
        letter-spacing: 0.1em;
        font-size: 20px;
    }

    input {
        flex: 1;
        border: none;
        border-bottom: 1px solid #fff;
        background: transparent;
        outline: none;
        width: 60%;
        color: #fff;
        font-size: 16px;
        font-family: "indie flower", cursive;
        float: right;
    }

    .form {
        
        margin: 15px 0 15px 0;
    }

        .form hr {
            margin-top: 30px;
            margin-bottom: 10px;
        }

    input[type="submit"] {
        border: none;
        outline: none;
        height: 40px;
        background-color: #0075ff;
        color: #fff;
        font-size: 14px;
        border-radius: 10px;
        font-family: "indie flower", cursive;
        font-weight: bold;
        margin-top: 20px;
        padding: 5px;
        width: 100px;
        flex: 1 0 200px;
    }



        input[type="submit"]:hover {
            opacity: 0.7;
            
            cursor: pointer;
        }

    a {
        text-decoration: none;
        border: none;
        outline: none;
        height: 60px;
        background-color: #0075ff;
        color: #fff;
        font-size: 14px;
        border-radius: 10px;
        font-family: "indie flower", cursive;
        font-weight: bold;
        margin-top: 20px;
        padding: 10px;
        width: 100px;
        flex: 1 0 200px;
    }

        a:hover {
            opacity: 0.7;
            
            cursor: pointer;
        }

    .list-create {
        margin: 10 auto;
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }
    select {
        width: 100%;
        height: 40px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
        font-family: Arial, sans-serif;
        background-color: #fff;
        color: #333333;
    }

        select:hover, select:focus {
            border-color: #333333;
        }

        select option {
            font-size: 16px;
            font-family: Arial, sans-serif;
            background-color: #fff;
            color: #333333;
        }

        select::-webkit-search-decoration {
            -webkit-appearance: none;
        }

        select::-webkit-search-cancel-button {
            -webkit-appearance: none;
        }
    .field-validation-error {
        color: #e80c4d;
        font-weight: bold;
    }

    .field-validation-valid {
        display: none;
    }



    input[type="checkbox"].input-validation-error {
        border: 0 none;
    }

    .validation-summary-errors {
        color: #e80c4d;
        font-weight: bold;
        font-size: 1.1em;
    }
</style>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Add Conflict</h4>
        <br />
        <h3>If There Is No Conflict, Write <span>None</span> in <span>Conflict</span> and <span>Risk</span></h3>
        <hr />
        <div class="form">
            @for (var x = 0; x < Model.Count(); x++)
            {
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.Label("effective", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.ValueFor(z => Model.ToList()[x].effective.name)
                        @Html.ValidationMessageFor(z => Model.ToList()[x].effective.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                if (ViewBag.p != null && (int)ViewBag.p == x)
                {
        <span class="validation-summary-errors">@ViewBag.error</span>
                }
                <div class="form-group">
                    @Html.Label("conflict", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(z => Model.ToList()[x].New_conflict.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(z => Model.ToList()[x].New_conflict.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("conflict", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(z => Model.ToList()[x].old_conflict.name, (SelectList)ViewBag.effe, "Select Conflict")
                        @Html.ValidationMessageFor(z => Model.ToList()[x].old_conflict.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                if (ViewBag.o != null && (int)ViewBag.o == x)
                {
        <span class="validation-summary-errors">@ViewBag.errorr</span>
                }

                <div class="form-group">
                    @Html.Label("risk for this conflict", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(z => Model.ToList()[x].New_risk.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(z => Model.ToList()[x].New_risk.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("risk for this conflict", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(z => Model.ToList()[x].old_risk.name, (SelectList)ViewBag.risk, "Select Risk")
                        @Html.ValidationMessageFor(z => Model.ToList()[x].old_risk.name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <hr />

            }
        </div>



        <div class="list-create">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Add" class="btn btn-default" />
                </div>
            </div>
            <div>
                @Html.ActionLink("List", "Index")
            </div>
        </div>
    </div>
}

